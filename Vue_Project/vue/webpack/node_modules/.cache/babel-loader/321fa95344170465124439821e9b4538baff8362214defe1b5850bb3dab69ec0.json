{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      user: {\n        userId: '',\n        userPw: '',\n        name: '',\n        tel: '',\n        birthday: '',\n        gender: '',\n        postcode: '',\n        addr1: '',\n        addr2: '',\n        userType: '',\n        loginType: ''\n      }\n    };\n  },\n  created() {\n    this.getUser();\n  },\n  methods: {\n    // 주소찾기 버튼 클릭 시 다음 우편번호 API 호출\n    openDaumPop() {\n      new window.daum.Postcode({\n        oncomplete: data => {\n          this.postcode = data.zonecode;\n          this.addr1 = data.address;\n        }\n      }).open();\n    },\n    // 페이지 접속 시 유저 데이터를 가져오는 메소드 (created() 부분에서 사용)\n    getUser() {\n      const userId = this.$route.params.userId;\n      axios.get(`http://localhost:8095/api/user/${userId}`).then(response => {\n        this.user = response.data;\n        console.log(response.data);\n      }).catch(error => {\n        console.log(\"Error!!\", error);\n      });\n    },\n    // 수정버튼 클릭 시 동작\n    updtForm() {\n      let requestData = {\n        userId: this.userId,\n        userPw: this.userPw,\n        name: this.name,\n        tel: this.tel,\n        birthday: this.birthday,\n        gender: this.gender,\n        postcode: this.postcode,\n        addr1: this.addr1,\n        addr2: this.addr2,\n        userType: 'normal',\n        loginType: 'site'\n      };\n      console.log(requestData);\n    },\n    // 취소 버튼 클릭 시\n    cancel() {\n      const con = \"정보수정을 취소하시겠습니까?\";\n      if (confirm(con)) {\n        this.$router.go(-1);\n      } else {\n        return false;\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","user","userId","userPw","name","tel","birthday","gender","postcode","addr1","addr2","userType","loginType","created","getUser","methods","openDaumPop","window","daum","Postcode","oncomplete","zonecode","address","open","$route","params","get","then","response","console","log","catch","error","updtForm","requestData","cancel","con","confirm","$router","go"],"sources":["C:\\Users\\beomki\\git\\vue_project\\Vue_Project\\vue\\webpack\\src\\views\\user\\UpdateView.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <h1>\r\n            회원수정페이지\r\n        </h1>\r\n    </div>\r\n\r\n    <form @submit.prevent=\"updtForm\">\r\n        <input type=\"hidden\" name=\"userType\" v-model=\"user.userType\" />\r\n        <input type=\"hidden\" name=\"loginType\" v-model=\"user.loginType\" />\r\n        <input type=\"hidden\" name=\"editDate\" />\r\n        <div>\r\n            <ul>\r\n                <li>\r\n                    <span>\r\n                        아이디\r\n                    </span>\r\n                    <span>\r\n                        {{ user.userId }}\r\n                    </span>\r\n                </li>\r\n                <li>\r\n                    <span>\r\n                        이름\r\n                    </span>\r\n                    <span>\r\n                        <input type=\"text\" name=\"name\" v-model=\"user.name\" />\r\n                    </span>\r\n                </li>\r\n                <li>\r\n                    <span>\r\n                        연락처\r\n                    </span>\r\n                    <span>\r\n                        <input type=\"text\" name=\"tel\" v-model=\"user.tel\" />\r\n                    </span>\r\n                </li>\r\n                <li>\r\n                    <span>\r\n                        생년월일\r\n                    </span>\r\n                    <span>\r\n                        <input type=\"date\" name=\"birthday\" v-model=\"user.birthday\" />\r\n                    </span>\r\n                </li>\r\n                <li>\r\n                    <span>\r\n                        성별\r\n                    </span>\r\n                    <span>\r\n                        <input type=\"text\" name=\"gender\" v-model=\"user.gender\" />\r\n                    </span>\r\n                </li>\r\n                <li>\r\n                    <span>\r\n                        주소\r\n                    </span>\r\n                    <br />\r\n                    <span>\r\n                        우편번호 : <input type=\"text\" name=\"postcode\" v-model=\"user.postcode\" />\r\n                        <button type=\"button\" @click=\"openDaumPop()\">주소찾기</button>\r\n                    </span>\r\n                    <br />\r\n                    <span>\r\n                        상세주소 : <input type=\"text\" name=\"addr1\" v-model=\"user.addr1\" /><input type=\"text\" name=\"addr2\" v-model=\"user.addr2\" />\r\n                    </span>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n        <div>\r\n            <button type=\"submit\">수정</button>\r\n            <button @click=\"cancel()\">취소</button>\r\n        </div>\r\n    </form>\r\n</template>\r\n<script>\r\n    import axios from 'axios';\r\n\r\n    export default {\r\n        data() {\r\n            return {\r\n                user : {\r\n                    userId : '',\r\n                    userPw : '',\r\n                    name : '',\r\n                    tel : '',\r\n                    birthday : '',\r\n                    gender : '',\r\n                    postcode : '',\r\n                    addr1 : '',\r\n                    addr2 : '',\r\n                    userType : '',\r\n                    loginType : ''\r\n                }\r\n            };\r\n        },\r\n        created() {\r\n            this.getUser();\r\n        },\r\n        methods : {\r\n            // 주소찾기 버튼 클릭 시 다음 우편번호 API 호출\r\n            openDaumPop() {\r\n                new window.daum.Postcode({\r\n                    oncomplete: (data) => {\r\n                        this.postcode = data.zonecode;\r\n                        this.addr1 = data.address;\r\n                    }\r\n                }).open()\r\n            },\r\n            // 페이지 접속 시 유저 데이터를 가져오는 메소드 (created() 부분에서 사용)\r\n            getUser() {\r\n                const userId = this.$route.params.userId;\r\n                axios.get(`http://localhost:8095/api/user/${userId}`)\r\n                        .then(response => {\r\n                            this.user = response.data;\r\n                            console.log(response.data);\r\n                        })\r\n                        .catch(error => {\r\n                            console.log(\"Error!!\", error);\r\n                        })\r\n            },\r\n            // 수정버튼 클릭 시 동작\r\n            updtForm() {\r\n                let requestData = {\r\n                    userId    : this.userId,\r\n                    userPw    : this.userPw,\r\n                    name      : this.name,\r\n                    tel       : this.tel,\r\n                    birthday  : this.birthday,\r\n                    gender    : this.gender,\r\n                    postcode  : this.postcode,\r\n                    addr1     : this.addr1,\r\n                    addr2     : this.addr2,\r\n                    userType  : 'normal',\r\n                    loginType : 'site'\r\n                };\r\n                console.log(requestData);\r\n            },\r\n            // 취소 버튼 클릭 시\r\n            cancel() {\r\n                const con = \"정보수정을 취소하시겠습니까?\";\r\n\r\n                if (confirm(con)) {\r\n                    this.$router.go(-1);\r\n                } else {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n</script>"],"mappings":"AA4EI,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACXC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,IAAG,EAAI;QACHC,MAAK,EAAI,EAAE;QACXC,MAAK,EAAI,EAAE;QACXC,IAAG,EAAI,EAAE;QACTC,GAAE,EAAI,EAAE;QACRC,QAAO,EAAI,EAAE;QACbC,MAAK,EAAI,EAAE;QACXC,QAAO,EAAI,EAAE;QACbC,KAAI,EAAI,EAAE;QACVC,KAAI,EAAI,EAAE;QACVC,QAAO,EAAI,EAAE;QACbC,SAAQ,EAAI;MAChB;IACJ,CAAC;EACL,CAAC;EACDC,OAAOA,CAAA,EAAG;IACN,IAAI,CAACC,OAAO,CAAC,CAAC;EAClB,CAAC;EACDC,OAAM,EAAI;IACN;IACAC,WAAWA,CAAA,EAAG;MACV,IAAIC,MAAM,CAACC,IAAI,CAACC,QAAQ,CAAC;QACrBC,UAAU,EAAGpB,IAAI,IAAK;UAClB,IAAI,CAACQ,QAAO,GAAIR,IAAI,CAACqB,QAAQ;UAC7B,IAAI,CAACZ,KAAI,GAAIT,IAAI,CAACsB,OAAO;QAC7B;MACJ,CAAC,CAAC,CAACC,IAAI,CAAC;IACZ,CAAC;IACD;IACAT,OAAOA,CAAA,EAAG;MACN,MAAMZ,MAAK,GAAI,IAAI,CAACsB,MAAM,CAACC,MAAM,CAACvB,MAAM;MACxCH,KAAK,CAAC2B,GAAG,CAAC,kCAAkCxB,MAAM,EAAE,EAC3CyB,IAAI,CAACC,QAAO,IAAK;QACd,IAAI,CAAC3B,IAAG,GAAI2B,QAAQ,CAAC5B,IAAI;QACzB6B,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC5B,IAAI,CAAC;MAC9B,CAAC,EACA+B,KAAK,CAACC,KAAI,IAAK;QACZH,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEE,KAAK,CAAC;MACjC,CAAC;IACb,CAAC;IACD;IACAC,QAAQA,CAAA,EAAG;MACP,IAAIC,WAAU,GAAI;QACdhC,MAAK,EAAO,IAAI,CAACA,MAAM;QACvBC,MAAK,EAAO,IAAI,CAACA,MAAM;QACvBC,IAAG,EAAS,IAAI,CAACA,IAAI;QACrBC,GAAE,EAAU,IAAI,CAACA,GAAG;QACpBC,QAAO,EAAK,IAAI,CAACA,QAAQ;QACzBC,MAAK,EAAO,IAAI,CAACA,MAAM;QACvBC,QAAO,EAAK,IAAI,CAACA,QAAQ;QACzBC,KAAI,EAAQ,IAAI,CAACA,KAAK;QACtBC,KAAI,EAAQ,IAAI,CAACA,KAAK;QACtBC,QAAO,EAAK,QAAQ;QACpBC,SAAQ,EAAI;MAChB,CAAC;MACDiB,OAAO,CAACC,GAAG,CAACI,WAAW,CAAC;IAC5B,CAAC;IACD;IACAC,MAAMA,CAAA,EAAG;MACL,MAAMC,GAAE,GAAI,iBAAiB;MAE7B,IAAIC,OAAO,CAACD,GAAG,CAAC,EAAE;QACd,IAAI,CAACE,OAAO,CAACC,EAAE,CAAC,CAAC,CAAC,CAAC;MACvB,OAAO;QACH,OAAO,KAAK;MAChB;IACJ;EACJ;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}