{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      userInfo: {\n        userId: '',\n        userPw: '',\n        name: '',\n        tel: '',\n        birthday: '',\n        gender: '',\n        postcode: '',\n        addr1: '',\n        addr2: '',\n        userType: '',\n        loginType: ''\n      },\n      // 비밀번호 정규식 체크\n      passwordError: '',\n      // 비밀번호 체크\n      passwordNotMatch: '',\n      // 전화번호 정규식 체크\n      telError: '',\n      // 다음 우편주소 return 데이터\n      postcode: '',\n      addr1: ''\n    };\n  },\n  computed: {\n    isFormValid() {\n      return this.validUserPw || this.userPwMatch || this.validUserTel;\n    }\n  },\n  methods: {\n    // 비밀번호 입력 유효성 검사\n    validUserPw() {\n      const passWordRegEx = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\n      if (!this.userPw || !passWordRegEx.test(this.userPw)) {\n        this.passwordError = '비밀번호는 최소 8자 이상, 대문자, 소문자, 숫자, 특수 문자를 포함해야 합니다.';\n      } else {\n        this.passwordError = '';\n      }\n    },\n    // 입력한 비밀번호와 재입력하는 비밀번호가 동일하는지 확인\n    userPwMatch() {\n      const passRe = document.getElementById(\"userPwRe\").value;\n      const pass = this.userPw;\n      if (passRe != pass) {\n        this.passwordNotMatch = '입력하신 비밀번호와 일치하지 않습니다.';\n      } else {\n        this.passwordNotMatch = '';\n      }\n    },\n    // 전화번호 입력 유효성 검사\n    validUserTel() {\n      const telRegEx = /^01[0-9]-[0-9]{4}-[0-9]{4}$/;\n      if (!this.tel || !telRegEx.test(this.tel)) {\n        this.telError = \"유효한 핸드폰 번호를 입력해주세요.\";\n      } else {\n        this.telError = '';\n      }\n    },\n    // 주소찾기 버튼 클릭 시 다음 우편번호 API 호출\n    openDaumPop() {\n      console.log(\"여기?\");\n      new window.daum.Postcode({\n        oncomplete: data => {\n          console.log(\"여긴 왜 안와..?\");\n          this.postcode = data.zonecode;\n          this.addr1 = data.address;\n        }\n      }).open();\n    },\n    // 유효성 검사\n    validate() {\n      const passWordRegEx = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\n      const telRegEx = /^01[0-9]-[0-9]{4}-[0-9]{4}$/;\n      if (!this.userPw || !passWordRegEx.test(this.userPw)) {\n        alert(\"유효한 비밀번호를 입력해주세요.\");\n        document.getElementById(\"userPw\").focus();\n        return false;\n      }\n      if (!this.tel || !telRegEx.test(this.tel)) {\n        alert(\"유효한 핸드폰 번호를 입력해주세요.\");\n        document.getElementById(\"tel\").focus();\n        return false;\n      }\n    },\n    // 가입 버튼 클릭 시 동작\n    joinForm() {\n      let requestData = {\n        userId: this.userId,\n        userPw: this.userPw,\n        name: this.name,\n        tel: this.tel,\n        birthday: this.birthday,\n        gender: this.gender,\n        postcode: this.postcode,\n        addr1: this.addr1,\n        addr2: this.addr2,\n        userType: 'normal',\n        loginType: 'site'\n      };\n\n      // 유효성 검사를 통과하면 회원가입 진행\n      axios.post('http://localhost:8095/api/user/regist', requestData).then(response => {\n        alert(response.data); //  회원가입이 완료되었습니다.\n        this.$router.push('/');\n      }).catch(error => {\n        alert(\"회원가입에 실패하였습니다.\\n 동일 오류가 발생할 경우 관리자에게 문의하세요.\");\n        console.log(error);\n        return false;\n      });\n    },\n    // 취소 버튼 클릭 시\n    cancel() {\n      const con = \"회원가입을 취소하시겠습니까?\";\n      if (confirm(con)) {\n        this.$router.push('/');\n      } else {\n        return false;\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","userInfo","userId","userPw","name","tel","birthday","gender","postcode","addr1","addr2","userType","loginType","passwordError","passwordNotMatch","telError","computed","isFormValid","validUserPw","userPwMatch","validUserTel","methods","passWordRegEx","test","passRe","document","getElementById","value","pass","telRegEx","openDaumPop","console","log","window","daum","Postcode","oncomplete","zonecode","address","open","validate","alert","focus","joinForm","requestData","post","then","response","$router","push","catch","error","cancel","con","confirm"],"sources":["C:\\Users\\beomki\\git\\vue_project\\Vue_Project\\vue\\webpack\\src\\views\\user\\RegistView.vue"],"sourcesContent":["<template>\r\n    <form @submit.prevent=\"joinForm\">\r\n\r\n        <h1>회원가입</h1>\r\n        <div>\r\n            <label>\r\n                아이디\r\n                <br />\r\n                <input type=\"text\" id=\"userId\" v-model=\"userId\" autofocus placeholder=\"아이디를 입력해주세요\"/>\r\n            </label>\r\n        </div>\r\n        \r\n        <div>\r\n            <label>\r\n                비밀번호\r\n                <br />\r\n                <!-- @input >> 사용자가 입력할 때 마다 검증 메소드를 호출 -->\r\n                <input type=\"password\" id=\"userPw\" v-model=\"userPw\" @input=\"validUserPw\"  placeholder=\"비밀번호를 입력해주세요\" />\r\n                <div>\r\n                    <span v-if=\"passwordError\">\r\n                        {{ passwordError }}\r\n                    </span>\r\n                </div>\r\n            </label>\r\n        </div>\r\n\r\n        <div>\r\n            <label>\r\n                비밀번호 확인\r\n                <br />\r\n                <input type=\"password\" id=\"userPwRe\" @input=\"userPwMatch\" placeholder=\"비밀번호를 다시 한번 입력해주세요\" />\r\n                <div>\r\n                    <span v-if=\"passwordNotMatch\">\r\n                        {{ passwordNotMatch }}\r\n                    </span>\r\n                </div>\r\n            </label>\r\n        </div>\r\n\r\n        <div>\r\n            <label>\r\n                이름\r\n                <br />\r\n                <input type=\"text\" id=\"name\" v-model=\"name\" />\r\n            </label>\r\n        </div>\r\n\r\n        <div>\r\n            <label>\r\n                휴대폰\r\n                <br />\r\n                <input type=\"text\" id=\"tel\" v-model=\"tel\" @input=\"validUserTel\" placeholder=\"010-1234-5678\"/>\r\n                <div>\r\n                    <span v-if=\"telError\">\r\n                        {{ telError }}\r\n                    </span>\r\n                </div>\r\n            </label>\r\n        </div>\r\n\r\n        <div>\r\n            <label>\r\n                생일\r\n                <br />\r\n                <input type=\"date\" id=\"birthday\" v-model=\"birthday\" />\r\n            </label>\r\n        </div>\r\n\r\n        <div>\r\n            <span>\r\n                성별\r\n            </span>\r\n            <label for=\"male\">\r\n                <input type=\"radio\" id=\"male\" name=\"gender\" v-model=\"gender\" value=\"male\" />남성\r\n            </label>\r\n            <label for=\"female\">\r\n                <input type=\"radio\" id=\"female\" name=\"gender\" v-model=\"gender\" value=\"female\" />여성\r\n            </label>\r\n        </div>\r\n\r\n        <div>\r\n            <label for=\"postcode\">우편번호</label>\r\n            <br />\r\n            <input type=\"text\" name=\"postcode\" v-model=\"postcode\" />\r\n            <button type=\"button\" @click=\"openDaumPop()\">주소찾기</button>\r\n            <!-- <input type=\"text\" name=\"postcode\" v-model=\"postcode\"/> -->\r\n        </div>\r\n\r\n        <div>\r\n            <label for=\"addr1\">주소</label>\r\n            <br />\r\n            <input type=\"text\" name=\"addr1\" v-model=\"addr1\" />\r\n        </div>\r\n\r\n        <div>\r\n            <label for=\"addr2\">상세주소</label>\r\n            <br />\r\n            <input type=\"text\" name=\"addr2\" v-model=\"addr2\" />\r\n        </div>\r\n        \r\n        <div>\r\n            <button type=\"submit\">가입</button>\r\n        </div>\r\n    </form>\r\n    <button @click=\"cancel()\">취소</button>\r\n</template>\r\n\r\n<script>\r\n    import axios from 'axios';\r\n\r\n    export default {\r\n        data() {\r\n            return {\r\n                userInfo: {\r\n                    userId : '',\r\n                    userPw : '',\r\n                    name : '',\r\n                    tel : '',\r\n                    birthday : '',\r\n                    gender : '',\r\n                    postcode : '',\r\n                    addr1 : '',\r\n                    addr2 : '',\r\n                    userType : '',\r\n                    loginType : ''\r\n                },\r\n                // 비밀번호 정규식 체크\r\n                passwordError : '',\r\n                // 비밀번호 체크\r\n                passwordNotMatch : '',\r\n                // 전화번호 정규식 체크\r\n                telError : '',\r\n                // 다음 우편주소 return 데이터\r\n                postcode : '',\r\n                addr1 : '',\r\n            };\r\n        },\r\n        computed : {\r\n            isFormValid() {\r\n                return this.validUserPw || this.userPwMatch || this.validUserTel;\r\n            },\r\n        },\r\n        methods : {\r\n            // 비밀번호 입력 유효성 검사\r\n            validUserPw() {\r\n                const passWordRegEx = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\r\n\r\n                if (!this.userPw || !passWordRegEx.test(this.userPw)) {\r\n                    this.passwordError = '비밀번호는 최소 8자 이상, 대문자, 소문자, 숫자, 특수 문자를 포함해야 합니다.';\r\n                } else {\r\n                    this.passwordError = '';\r\n                }\r\n            },\r\n            // 입력한 비밀번호와 재입력하는 비밀번호가 동일하는지 확인\r\n            userPwMatch() {\r\n                const passRe = document.getElementById(\"userPwRe\").value;\r\n                const pass = this.userPw;\r\n\r\n                if (passRe != pass) {\r\n                    this.passwordNotMatch = '입력하신 비밀번호와 일치하지 않습니다.';\r\n                } else {\r\n                    this.passwordNotMatch = '';\r\n                }\r\n            },\r\n            // 전화번호 입력 유효성 검사\r\n            validUserTel() {\r\n                const telRegEx = /^01[0-9]-[0-9]{4}-[0-9]{4}$/;\r\n                \r\n                if (!this.tel || !telRegEx.test(this.tel)) {\r\n                    this.telError = \"유효한 핸드폰 번호를 입력해주세요.\";\r\n                } else {\r\n                    this.telError = '';\r\n                }\r\n            },\r\n            // 주소찾기 버튼 클릭 시 다음 우편번호 API 호출\r\n            openDaumPop() {\r\n                console.log(\"여기?\");\r\n                new window.daum.Postcode({\r\n                    oncomplete: (data) => {\r\n                        console.log(\"여긴 왜 안와..?\");\r\n                        this.postcode = data.zonecode;\r\n                        this.addr1 = data.address;\r\n                    }\r\n                }).open()\r\n            },\r\n            // 유효성 검사\r\n            validate() {\r\n                const passWordRegEx = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\r\n                const telRegEx = /^01[0-9]-[0-9]{4}-[0-9]{4}$/;\r\n\r\n                if (!this.userPw || !passWordRegEx.test(this.userPw)) {\r\n                    alert(\"유효한 비밀번호를 입력해주세요.\");\r\n                    document.getElementById(\"userPw\").focus();\r\n                    return false;\r\n                }\r\n\r\n                if (!this.tel || !telRegEx.test(this.tel)) {\r\n                    alert(\"유효한 핸드폰 번호를 입력해주세요.\");\r\n                    document.getElementById(\"tel\").focus();\r\n                    return false;\r\n                }\r\n            },\r\n            // 가입 버튼 클릭 시 동작\r\n            joinForm() {\r\n                let requestData = {\r\n                    userId    : this.userId,\r\n                    userPw    : this.userPw,\r\n                    name      : this.name,\r\n                    tel       : this.tel,\r\n                    birthday  : this.birthday,\r\n                    gender    : this.gender,\r\n                    postcode  : this.postcode,\r\n                    addr1     : this.addr1,\r\n                    addr2     : this.addr2,\r\n                    userType  : 'normal',\r\n                    loginType : 'site'\r\n                };\r\n\r\n                // 유효성 검사를 통과하면 회원가입 진행\r\n                axios.post('http://localhost:8095/api/user/regist', requestData)\r\n                    .then(response => {\r\n                        alert(response.data);   //  회원가입이 완료되었습니다.\r\n                        this.$router.push('/');\r\n                    })\r\n                    .catch(error => {\r\n                        alert(\"회원가입에 실패하였습니다.\\n 동일 오류가 발생할 경우 관리자에게 문의하세요.\");\r\n                        console.log(error);\r\n                        return false;\r\n                    })\r\n            },\r\n            // 취소 버튼 클릭 시\r\n            cancel() {\r\n                const con = \"회원가입을 취소하시겠습니까?\";\r\n\r\n                if (confirm(con)) {\r\n                    this.$router.push('/');\r\n                } else {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n</script>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}